Index: ext/openssl/ossl.c
--- ext/openssl/ossl.c.orig
+++ ext/openssl/ossl.c
@@ -9,7 +9,7 @@
  */
 #include "ossl.h"
 #include <stdarg.h> /* for ossl_raise */
-#include <ruby/thread_native.h> /* for OpenSSL < 1.1.0 locks */
+#include <../../thread_pthread.h> /* for OpenSSL < 1.1.0 locks */
 
 /*
  * Data Conversion
@@ -485,7 +485,6 @@ print_mem_leaks(VALUE self)
  * Stores locks needed for OpenSSL thread safety
  */
 struct CRYPTO_dynlock_value {
-    rb_thread_lock_t lock;
     rb_thread_id_t owner;
     size_t count;
 };
@@ -493,7 +492,6 @@ struct CRYPTO_dynlock_value {
 static void
 ossl_lock_init(struct CRYPTO_dynlock_value *l)
 {
-    rb_thread_lock_initialize(&l->lock);
     l->count = 0;
 }
 
@@ -507,12 +505,8 @@ ossl_lock_unlock(int mode, struct CRYPTO_dynlock_value
 	    l->count++;
 	    return;
 	}
-	rb_thread_lock_lock(&l->lock);
 	l->owner = tid;
 	l->count = 1;
-    } else {
-	if (!--l->count)
-	    rb_thread_lock_unlock(&l->lock);
     }
 }
 
@@ -536,7 +530,6 @@ ossl_dyn_lock_callback(int mode, struct CRYPTO_dynlock
 static void
 ossl_dyn_destroy_callback(struct CRYPTO_dynlock_value *l, const char *file, int line)
 {
-    rb_thread_lock_destroy(&l->lock);
     OPENSSL_free(l);
 }
 
